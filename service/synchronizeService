var q = require('q');
var co = require('co');
var config = require('../config');
var dcmService = require('./dcmService');
var mongoDBService = require('./dcmMongoService');
var _ = require('lodash');

var logger = config.logger;
var localTempfilePath = config.dcmTempDir;
var pullDcmsTopullStudyThreshold = config.pullDcmsTopullStudyThreshold;
var rePushTroubleCountThreshold = config.rePushTroubleCountThreshold;
var rePushTroubleWait = config.rePushTroubleWait;

/**
 * 
 * @param stepCount {Number}
 */
var pushAndClean = function* (stepCount) {
    //
    //对本地的文件(未同步),进行上传,并更新DB中的记录(isSynchronized字段),
    logger.info('[step ' + (stepCount) + '] pushing fcms......');
    var ls =yield dcmService.listTempDcms();
    var pushStart = new Date().getTime();
    var pushedDcmUIDs = yield dcmService.pushDcms(localTempfilePath);
    logger.info('[step ' + (stepCount) + '] succeed: [' + pushedDcmUIDs.length + '],total: ['+ls.length+'],use time:['+(new Date().getTime()-pushStart)+'ms]');
    yield mongoDBService.setDcmsSynchronized(pushedDcmUIDs);

    //
    //查找DB中记录,找出本地的已经同步了的dcm files,将这些dcm files 删除,并将相应数据记录的dcmPath置为空串
    logger.info('[step ' + (stepCount) + '] cleaning pushed local fcms......');
    var synchronizedLocalDcms = yield mongoDBService.findSynchronizedLocalDcms();
    var dcmPaths = [];
    for (var n in synchronizedLocalDcms) {
        dcmPaths.push(synchronizedLocalDcms[n].dcmPath);
    }
    yield dcmService.rmLocalSynchronizedDcms(dcmPaths);
    yield mongoDBService.setSynchronizedDcmsDeleted();
}
var pushToClear = function* (stepCount) {
    var ls = yield dcmService.listTempDcms();
    var rePushTroubleCount=0;
    while (ls.length > 0) {
        if(rePushTroubleCount == rePushTroubleCountThreshold){
            logger.info('[step ' + (stepCount) + '] too much[javax.ejb.EJBTransactionRolledbackException]...each turn of pushing will wait for '+rePushTroubleWait+' milliseconds');
        }
        if(rePushTroubleCount >= 5){
            yield wait(rePushTroubleWait);
        }
        yield pushAndClean(stepCount);
        var lastLs = ls;
        ls = yield dcmService.listTempDcms();
        if(lastLs.length - ls.length < 3 && ls.length != 0){
            rePushTroubleCount++;
        }
    }
}
/**
 * 
 * @param stepCount
 * @returns allDcmsMetas {Array}
 */
var findAllSourceUID = function* (stepCount,synchronizingStudies) {

    var allDcms = yield dcmService.findAllSourceDcms(synchronizingStudies);
    var allDcmsMetas = dcmService.formatDcmForDB(allDcms);
    return allDcmsMetas;
}
var findAllDestUID = function* (stepCount) {

    var allDcms = yield dcmService.findAllDestDcms();
    var allDcmsMetas = dcmService.formatDcmForDB(allDcms);
    return allDcmsMetas;
}
var findAllDBSynchronizedUID = function* (stepCount) {

    var allDcmsMetas = yield mongoDBService.findAllSynchronizedDcms();
    return allDcmsMetas;
}
/**
 * 
 * @param stepCount
 * @param allDcmsMetas
 * @returns {{newStudiesIds: Array, newDcmDocs: Array}}
 */
var getDifferenceNormal = function* (stepCount,allDcmsMetas) {

    //先在studies一级比较,得出新的studies,并将对应的dcm的meta存入DB
    var totalNewDcmNum = 0;
    
    var newStudiesDocs = [];
    var sourceStudiesIds = yield mongoDBService.findAllStudiesId();
    var allStudiesIds = [];
    for (var i in allDcmsMetas) {
        allStudiesIds.push(allDcmsMetas[i].StudyInstanceUID);
    }
    allStudiesIds = _.uniq(allStudiesIds);
    var newStudiesIds = _.difference(allStudiesIds, sourceStudiesIds);
    //logger.info('[step ' + (stepCount) + '] found [' + newStudiesIds.length + '] new studies. ');
    //新studies对应的的meta存入DB
    if (newStudiesIds.length != 0) {
        for (var i in allDcmsMetas) {
            if (_.indexOf(newStudiesIds, allDcmsMetas[i].StudyInstanceUID) != -1) {
                newStudiesDocs.push(allDcmsMetas[i]);
            }
        }
        yield mongoDBService.insert(newStudiesDocs);
        totalNewDcmNum += newStudiesDocs.length;
    }

    //在dcm一级比较,得出新的dcm,并将它们的meta信息存入DB
    var ids = yield mongoDBService.findAllDcmId();
    var newDcmDocs = [];
    for (var i in allDcmsMetas) {
        var j;
        for (j = 0; j < ids.length; j++) {
            if (allDcmsMetas[i]._id == ids[j]) break;
        }
        if (j == ids.length) newDcmDocs.push(allDcmsMetas[i]);
    }
    //logger.info('[step ' + (stepCount) + '] found [' + newDcmDocs.length + '] new dcms');
    //新dcm的meta存入DB
    if (newDcmDocs.length != 0) {
        yield mongoDBService.insert(newDcmDocs);
        totalNewDcmNum += newDcmDocs.length;
    }

    logger.info('[step ' + (stepCount) + '] found [' + newStudiesIds.length + '] new studies; [' + newDcmDocs.length + '] new dcms; total [' + totalNewDcmNum + '] new dcms');

    return {
        newStudiesIds:newStudiesIds,
        newDcmDocs:newDcmDocs,
        totalNewDcmNum:totalNewDcmNum
    }
}
var getDifferenceMaxStudies = function* (stepCount,allDcmsMetas) {

    //先在studies一级比较,得出未同步的studies,并将对应的dcm的meta存入DB
    var totalNewDcmNum = 0;

    var newStudiesDocs = [];
    var sourceStudiesIds = yield mongoDBService.findAllStudiesId();
    var allStudiesIds = [];
    for (var i in allDcmsMetas) {
        allStudiesIds.push(allDcmsMetas[i].StudyInstanceUID);
    }
    allStudiesIds = _.uniq(allStudiesIds);
    var newStudiesIds = _.difference(allStudiesIds, sourceStudiesIds);
    //logger.info('[step ' + (stepCount) + '] found [' + newStudiesIds.length + '] new studies. ');
    //新studies对应的的meta存入DB
    if (newStudiesIds.length != 0) {
        for (var i in allDcmsMetas) {
            if (_.indexOf(newStudiesIds, allDcmsMetas[i].StudyInstanceUID) != -1) {
                newStudiesDocs.push(allDcmsMetas[i]);
            }
        }
        yield mongoDBService.insert(newStudiesDocs);
        totalNewDcmNum += newStudiesDocs.length;
    }

    //在dcm一级比较,得出未同步的的dcm,并将它们的meta信息存入DB
    var ids = yield mongoDBService.findAllDcmId();
    var newDcmDocs = [];
    for (var i in allDcmsMetas) {
        var j;
        for (j = 0; j < ids.length; j++) {
            if (allDcmsMetas[i]._id == ids[j]) break;
        }
        if (j == ids.length) newDcmDocs.push(allDcmsMetas[i]);
    }
    

    //logger.info('[step ' + (stepCount) + '] found [' + newDcmDocs.length + '] new dcms');
    //新dcm的meta存入DB
    if (newDcmDocs.length != 0) {
        yield mongoDBService.insert(newDcmDocs);
        totalNewDcmNum += newDcmDocs.length;
    }
    logger.info('[step ' + (stepCount) + '] found [' + newStudiesIds.length + '] new studies; [' + newDcmDocs.length + '] new dcms; total [' + totalNewDcmNum + '] new dcms');
    
    //从现在的newDcmDocs中要下载的数目多的study,把它的study算在newStudiesIds里,再把它原本要下载的dcm从newDcmDocs中去掉
    function serachStudyInstanceUID(newDcmCount,a) {
        for(var i=0;i<newDcmCount.length;i++){
            if(newDcmCount[i].StudyInstanceUID == a){
                return i;
            }
        }
        return -1;
    }
    var MAXCOUNT = pullDcmsTopullStudyThreshold;
    var newDcmCount =[];
    var addedStudies = [];
    for(var i in newDcmDocs){
        var index = serachStudyInstanceUID(newDcmCount,newDcmDocs[i].StudyInstanceUID)
        if(index == -1){
            newDcmCount.push({
                StudyInstanceUID:newDcmDocs[i].StudyInstanceUID,
                count:1
            });
        }else{
            newDcmCount[index].count+=1;
            if(newDcmCount[index].count > MAXCOUNT){
                addedStudies.push(newDcmCount[index].StudyInstanceUID);
            }
        }
    }
    addedStudies = _.uniq(addedStudies);
    //console.log(newDcmCount);
    //console.log(addedStudies);
    //console.log(newDcmDocs);

    //修改返回的newStudiesIds和newDcmDocs
    newStudiesIds = newStudiesIds.concat(addedStudies);
    for(var i in addedStudies){
        
        for(var j=0;j<newDcmDocs.length;j++ ){
            if(addedStudies[i] == newDcmDocs[j].StudyInstanceUID){
                newDcmDocs.splice(j,1);
                j--;
            }
        }
    }
    //console.log(newDcmDocs);
    return {
        newStudiesIds:newStudiesIds,
        newDcmDocs:newDcmDocs,
        totalNewDcmNum:totalNewDcmNum
    }
}
var getDifference = function* (stepCount,allSourceDcmsMetas,allDestDcmsMetas) {
    var totalNewDcmNum = 0;
    var newDcmsMetasStudyLevel = [];

    var newDcms = [];
    for (var i in allSourceDcmsMetas) {
        var j;
        for (j = 0; j < allDestDcmsMetas.length; j++) {
            if (allSourceDcmsMetas[i].SOPInstanceUID == allDestDcmsMetas[j].SOPInstanceUID) break;
        }
        if (j == allDestDcmsMetas.length) newDcms.push(allSourceDcmsMetas[i]);
    }
    //console.log('newDcms:  ['+newDcms.length+']' + newDcms);

    var newDcmsStudiesIds = [];
    for (var i in newDcms) {
        newDcmsStudiesIds.push(newDcms[i].StudyInstanceUID);
    }
    newDcmsStudiesIds = _.uniq(newDcmsStudiesIds);
    //console.log('########## newDcmsStudiesIds:  ['+newDcmsStudiesIds.length+']' + newDcmsStudiesIds);


    return {
        newDcms:newDcms,
        newDcmsStudiesIds:newDcmsStudiesIds
    };

    /*
    //取得source端的studiesID
    var allSourceStudiesIds = [];
    for (var i in allSourceDcmsMetas) {
        allSourceStudiesIds.push(allSourceDcmsMetas[i].StudyInstanceUID);
    }
    allSourceStudiesIds = _.uniq(allSourceStudiesIds);

    //取得dest端的studiesID
    var allDestStudiesIds = [];
    for (var i in allDestDcmsMetas) {
        allDestStudiesIds.push(allDestDcmsMetas[i].StudyInstanceUID);
    }
    allDestStudiesIds = _.uniq(allDestStudiesIds);

    //得到Source端新产生的studies
    var newStudiesIds = _.difference(allSourceStudiesIds, allDestStudiesIds);
    console.log('newStudiesIds:  ['+newStudiesIds.length+']' + newStudiesIds);

    if (newStudiesIds.length != 0) {
        for (var i in allSourceDcmsMetas) {
            if (_.indexOf(newStudiesIds, allSourceDcmsMetas[i].StudyInstanceUID) != -1) {
                newDcmsMetasStudyLevel.push(allSourceDcmsMetas[i]);
            }
        }
    }
    var tempAllStudies = allDestDcmsMetas.concat(newDcmsMetasStudyLevel);
    var newDcmsExceptNewStudies = [];
    for (var i in allSourceDcmsMetas) {
        var j;
        for (j = 0; j < tempAllStudies.length; j++) {
            if (allSourceDcmsMetas[i].SOPInstanceUID == tempAllStudies[j].SOPInstanceUID) break;
        }
        if (j == tempAllStudies.length) newDcmsExceptNewStudies.push(allSourceDcmsMetas[i]);
    }
    console.log('newDcmsExceptNewStudies:  ['+newDcmsExceptNewStudies.length+']' + newDcmsExceptNewStudies);

    return {
        newStudiesIds:newStudiesIds,
        newDcmDocs:newDcmDocs,
        totalNewDcmNum:totalNewDcmNum
    }
    */
}
/**
 * 
 * @param newStudiesIds
 * @param newDcmDocs
 */
var getNewStudiesAndDcms = function* (stepCount,newStudiesIds,newDcmDocs) {
    //pull新的studies
    if (newStudiesIds.length != 0) {
        logger.info('[step ' + (stepCount) + '] getting new studies ......');
        for (var m = 0;m < newStudiesIds.length;m++) {
            //retrieveLevel,StudyInstanceUID,SeriesInstanceUID,SOPInstanceUID
            yield dcmService.pullDcms(m+1,'STUDY', newStudiesIds[m],null,null);
        }
    }

    //pull新的Dcms
    if (newDcmDocs.length != 0) {

        logger.info('[step ' + (stepCount) + '] getting new dcms ......');
        for (var m = 0;m < newDcmDocs.length;m++) {
            //retrieveLevel,StudyInstanceUID,SeriesInstanceUID,SOPInstanceUID
            yield dcmService.pullDcms(m+1,'IMAGE', newDcmDocs[m].StudyInstanceUID, newDcmDocs[m].SeriesInstanceUID, newDcmDocs[m].SOPInstanceUID);
        }
    }
}

var readAll = function*(stepCount,localTempfilePath){
    var dcmMetas = yield dcmService.readDcm(localTempfilePath);
    var duplicatedDcmPaths = yield mongoDBService.setDcmsPath(dcmMetas);
    yield dcmService.rmLocalSynchronizedDcms(duplicatedDcmPaths);
    logger.info('[step ' + (stepCount) + '] removed local duplicated dcms : [' + duplicatedDcmPaths.length + ']');
    return dcmMetas;
}

exports.init = function* () {
    logger.info('[init step ' + '] ***** initialing Synchronizer...... *****');
    logger.info('[init step ' + '] clearing DB records...... ');
    yield mongoDBService.removeAllDcmRecords();
    yield mongoDBService.removeAllSynchronizingStudyRecords();
    logger.info('[init step ' + '] clearing local temp dir...... ');
    yield dcmService.rmAllLocalDcms(localTempfilePath);
    logger.info('[init step ' + '] finished ');
}

exports.getDiff = function* (round,synchronizingStudies) {

    var count = 1;
    //---1
    //---findA端所有
    logger.info('[getDiff '+round+'][step ' + (count) + ' findA] finding all Source new files......');
    var findSourceStart = new Date().getTime();
    var allSourceDcmsMetas = yield findAllSourceUID(count,synchronizingStudies);
    logger.info('[getDiff '+round+'][step ' + (count) + ' findA] finished. found all Source dcms number: [' + allSourceDcmsMetas.length + '],use time:['+(new Date().getTime()-findSourceStart)+'ms]\n');
    count++

    if(round ==1){
        //---2
        //---findB端所有
        logger.info('[getDiff '+round+'][step ' + (count) + ' findB] finding all Destination files......');
        var findDestStart = new Date().getTime();
        var allDestDcmsMetas = yield findAllDestUID(count);
        logger.info('[getDiff '+round+'][step ' + (count) + ' findB] Recording all Destination files......');
        var InitDcmsMetas = dcmService.formatInitDcmForDB(allDestDcmsMetas);
        yield mongoDBService.insert(InitDcmsMetas);
        logger.info('[getDiff '+round+'][step ' + (count) + ' findB] finished. found all Destination dcms number: [' + allDestDcmsMetas.length + '],use time:['+(new Date().getTime()-findDestStart)+'ms]\n');
        count++;
        
    }else{
        //---2
        //---find 本地记录的所有已同步dcm
        logger.info('[getDiff '+round+'][step ' + (count) + ' findL] finding all synchronized recorded......');
        var findDestStart = new Date().getTime();
        var allDestDcmsMetas = yield findAllDBSynchronizedUID(count);
        logger.info('[getDiff '+round+'][step ' + (count) + ' findL] finished. found all synchronized recorded number: [' + allDestDcmsMetas.length + '],use time:['+(new Date().getTime()-findDestStart)+'ms]\n');
        count++;
    }
    // logger.info('++++++++++++++++++++++++ checking ++++++++++++++++++++++++++......');
    // var allDestDcmsMetasCheck = yield findAllDestUID(0);
    // var checkResult = yield getDifference(0,allDestDcmsMetasCheck,allDestDcmsMetas);
    // if(checkResult.newDcms.length >0){
    //     console.log('!!!!!!!!!!!!!!!!!!!! unmatch found : ');
    //     console.log(checkResult.newDcms);
    // }
    // logger.info('++++++++++++++++++++++++ check over ++++++++++++++++++++++++++......');
    

    //---3
    //A端与B端比较
    logger.info('[getDiff '+round+'][step ' + (count) + ' diff] comparing diff and finding new files......');
    var diffStart = new Date().getTime();
    var result = yield getDifference(count,allSourceDcmsMetas,allDestDcmsMetas);

    var newDcms = result.newDcms;
    var newDcmsStudiesIds = result.newDcmsStudiesIds;
    var newDcmDoc = dcmService.formatDcmForDB(newDcms);
    yield mongoDBService.insert(newDcmDoc);
    logger.info('[getDiff '+round+'][step ' + (count) + ' diff] ready to get [' + newDcmsStudiesIds.length + '] studies; total [' + newDcms.length + '] dcms;');
    logger.info('[getDiff '+round+'][step ' + (count) + ' diff] finished. use time:['+(new Date().getTime()-diffStart)+'ms]\n');
    logger.info('[getDiff '+round+'] finished-------------------------------------\n');

    return result;

}

exports.synchronizeOnce = function*(synchronizeID,studyID) {
    var count = 1;
    
    var studyPath = localTempfilePath + '/' + studyID;
    //pull
    logger.info('[synchronize '+synchronizeID+'][step ' + (count) + ' pull] getting study :['+ studyID +']......');
    var pullDcmsStart = new Date().getTime();
    yield dcmService.pullDcmsToDir(1,'STUDY', studyID,null,null,studyID);
    var files = yield dcmService.listTempDcms(studyID);
    logger.info('[synchronize '+synchronizeID+'][step ' + (count) + ' pull] finished. got file:['+files.length+'],use time:['+(new Date().getTime()-pullDcmsStart)+'ms]\n');

    count++;
    //read
    logger.info('[synchronize '+synchronizeID+'][step ' + (count) + ' read] reading study :['+ studyID +']......');
    var readDcmsStart = new Date().getTime();
    var dcmMetas = yield dcmService.readDcm(studyPath);
    var duplicatedDcmPaths = yield mongoDBService.setDcmsPath(dcmMetas);
    yield dcmService.rmLocalSynchronizedDcms(duplicatedDcmPaths);
    logger.info('[synchronize '+synchronizeID+'][step ' + (count) + ' read] removed local duplicated dcms : [' + duplicatedDcmPaths.length + ']');
    logger.info('[synchronize '+synchronizeID+'][step ' + (count) + ' read] finished.read:['+dcmMetas.length+'],use time:['+(new Date().getTime()-readDcmsStart)+'ms]\n');

    count++;
    //push
    logger.info('[synchronize '+synchronizeID+'][step ' + (count) + ' push] pushing study :['+ studyID +']......');
    var ls =yield dcmService.listTempDcms(studyID);
    var pushStart = new Date().getTime();
    //如果拿回来的pushedDcmUIDs少于实际传输的dcmID,下面的dcmpath值置空操作会有误
    var pushedDcmUIDs = yield dcmService.pushDcmsAndRecordOneByOne(synchronizeID,count,studyPath);
    logger.info('[synchronize '+synchronizeID+'][step ' + (count) + ' push] succeed: [' + pushedDcmUIDs.length + '],total: ['+ls.length+'],use time:['+(new Date().getTime()-pushStart)+'ms]\n');
    //PauseUntillgetKeyPress();
    //yield mongoDBService.setDcmsSynchronized(pushedDcmUIDs);

    count++;
    //clear
    //根据成功的记录pushedDcmUIDs把DB中相应数据的dcmpath值置空,再删除整个study目录.
    logger.info('[synchronize '+synchronizeID+'][step ' + (count) + ' push] removing study :['+ studyID +']......');
    yield mongoDBService.setSynchronizedDcmsDeleted(pushedDcmUIDs);
    yield dcmService.rmStudyDir(studyPath);
    logger.info('[synchronize '+synchronizeID+'][step ' + (count) + ' push] finished\n');
    logger.info('[synchronize '+synchronizeID+'] finished===================================================\n');
    
    return studyID;

}






















exports.startSynchronize = function*() {

    var flag = true;
    while (flag) {
        var count = 0;
        logger.info('[step ' + (count) + '] ***** preparing for a new round of dcm synchronization...... *****');

        //---0
        //对于没有传输完成的dcms,先传输,保证dcmTempDir达到清空状态
        logger.info('[step ' + (count) + '] checking unfinished synchronization......');
        yield pushToClear(count);
        logger.info('[step ' + (count) + '] finished. checking over\n');
        count++;

        //---1
        //读取A端所有dcm的UID信息


        count++;
        //---2
        //将DB记录的dcm与A端的比较,挑出A端的新dcm
        logger.info('[step ' + (count) + '] ***** comparing diff and finding new files...... *****');
        var diffStart = new Date().getTime();
        var result = yield getDifferenceMaxStudies(count,allDcmsMetas);
        var newStudiesIds = result.newStudiesIds;
        var newDcmDocs = result.newDcmDocs;
        var totalNewDcmNum = result.totalNewDcmNum;
        logger.info('[step ' + (count) + '] ready to get [' + newStudiesIds.length + '] studies; [' + newDcmDocs.length + '] dcms;');
        logger.info('[step ' + (count) + '] finished. use time:['+(new Date().getTime()-diffStart)+'ms]\n');

        count++;
        
        //---3
        //pull新dcm
        logger.info('[step ' + (count) + '] ***** pulling all new files...... *****');
        var pullDcmsStart = new Date().getTime();
        yield getNewStudiesAndDcms(count,newStudiesIds,newDcmDocs);
        var pulledDcmFiles = yield dcmService.listTempDcms();
        while(pulledDcmFiles.length < totalNewDcmNum){
            logger.info('[step ' + (count) + '] pulled Dcm files number:['+ pulledDcmFiles.length +'];total new Dcm files number:['+ totalNewDcmNum +'],not match');
            yield getNewStudiesAndDcms(count,newStudiesIds,newDcmDocs);
            pulledDcmFiles = yield dcmService.listTempDcms();
        }
        
        logger.info('[step ' + (count) + '] finished. pulled: ['+pulledDcmFiles.length+'],total:['+totalNewDcmNum+'],use time:['+(new Date().getTime()-pullDcmsStart)+'ms]\n');
        if (newStudiesIds.length == 0 && newDcmDocs.length == 0) {
            logger.info('[step ' + (count) + '] found no any new files,this round is finished.\n');
            continue;
        }
        
        count++;
        //---4
        //对于本地的文件(未同步),进行读取信息,并更新DB(dcmPath字段),剔除已重复下载的dcms
        logger.info('[step ' + (count) + '] ***** reading new dcms...... *****');
        var readDcmsStart = new Date().getTime();
        var dcmMetas = yield readAll(count, localTempfilePath);
        logger.info('[step ' + (count) + '] finished.read:['+dcmMetas.length+'],use time:['+(new Date().getTime()-readDcmsStart)+'ms]\n');


        count++;
        //---5
        //对本地的文件,进行上传操作,并更新DB中的记录(isSynchronized字段),
        logger.info('[step ' + (count) + '] ***** pushing and cleaning local fcms...... *****');
        yield pushToClear(count);
        logger.info('[step ' + (count) + '] finished.\n');

        //flag = false;

    }
}

var wait = function (millscends) {
    //logger.info('** run command: **\n'+cmd);
    var defer = q.defer();
    _.delay(function (millscends) {
        console.log('waited for '+ millscends + 'ms');
        defer.resolve();
    },millscends,millscends);

    return defer.promise;
}
var PauseUntillgetKeyPress = function () {
    //logger.info('** run command: **\n'+cmd);
    var defer = q.defer();
    process.stdin.setEncoding('utf-8');
    process.stdin.on('data',(data) =>{
        console.log('program continue run')
        defer.resolve();
    });
    return defer.promise;
}